# Copyright 2024 Ian Lewis
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: tests

on:
  push:
    branches: [main]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read # Needed to check out the repo.

jobs:
  # Unit tests for TypeScript code
  ######################################

  ts-tests:
    name: TypeScript unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version-file: "package.json"
      - name: unit tests
        run: |
          make unit-test
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: "coverage/cobertura-coverage.xml"
          fail_ci_if_error: true

  # check-dist for actions
  ###############################

  check-dist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version-file: "package.json"

      - name: Rebuild the dist/ directory
        run: make clean package

      - name: Compare the expected and actual dist/ directories
        id: diff
        run: |
          set -euo pipefail
          if [ "$(git diff --ignore-space-at-eol dist/ | wc -l)" -gt "0" ]; then
            echo "::error::Detected uncommitted changes after build.  See status below:"
            echo "::group::git diff"
            GIT_PAGER="cat" git diff
            echo "::endgroup::"
            exit 1
          fi

      # If dist/ was different from expected, upload the expected version as an artifact
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: ${{ failure() && steps.diff.conclusion == 'failure' }}
        with:
          name: dist
          path: dist/

  # Check license headers
  ###############################
  license-headers:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: true
          persist-credentials: false
      - run: |
          echo "${GITHUB_WORKSPACE}/autogen" >> "${GITHUB_PATH}"
      - run: |
          git config user.name "Unknown"
          make license-headers
      - name: check diff
        run: |
          set -euo pipefail
          if [ "$(GIT_PAGER="cat" git diff --ignore-space-at-eol | wc -l)" -gt "0" ]; then
              echo "Detected license header changes.  See status below:"
              echo "::group::git diff"
              GIT_PAGER="cat" git diff
              echo "::endgroup::"
              exit 1
          fi

  # formatting
  ###############################

  formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version-file: "package.json"
      - run: |
          make format
      - name: check diff
        run: |
          set -euo pipefail
          if [ "$(GIT_PAGER="cat" git diff --ignore-space-at-eol | wc -l)" -gt "0" ]; then
              echo "Detected formatting changes.  See status below:"
              echo "::group::git diff"
              GIT_PAGER="cat" git diff
              echo "::endgroup::"
              exit 1
          fi

  # linters
  ###############################

  actionlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: actionlint
        run: make actionlint

  eslint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version-file: "package.json"
      - run: make eslint

  zizmor:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - run: make zizmor
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: SARIF file
          path: results.sarif
          retention-days: 5

      - name: Upload to code-scanning
        # NOTE: Uploading SARIF requires GitHub Enterprise and GitHub Advanced Security license for private repositories.
        if: github.event.repository.private == false
        uses: github/codeql-action/upload-sarif@fca7ace96b7d713c7035871441bd52efbe39e27e # v3.28.19
        with:
          sarif_file: zizmor.sarif.json
          category: zizmor

  markdownlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version-file: "package.json"
      - run: make markdownlint

  renovate-config-validator:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version-file: "package.json"
      - run: make renovate-config-validator

  textlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version-file: "package.json"
      - run: make textlint

  yamllint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - run: make yamllint

  todos:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - run: make todos

  # e2e tests.
  ###############################

  issue-reopener-basic:
    runs-on: ubuntu-latest
    outputs:
      issue-url: ${{ steps.create-issue.outputs.url }}
    permissions:
      issues: write
    steps:
      - name: Checkout action
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: "todo-issue-reopener"
          persist-credentials: false

      # NOTE: We want to call the todo-issue-reopener action from a checkout on
      #       the default path of GITHUB_WORKSPACE but we don't want the code
      #       from the action itself to affect the outcome. We move it to /tmp
      #       so that it outside of the GITHUB_WORKSPACE.
      - name: Move checkout to tmp
        run: |
          mv "${GITHUB_WORKSPACE}/todo-issue-reopener" "/tmp"

      - id: create-issue
        name: Create closed issue
        env:
          GH_TOKEN: ${{ github.token }}
          PR_URL: ${{ github.event.pull_request.html_url }}
        run: |
          body=""
          if [ "${PR_URL}" != "" ]; then
            body="Test issue for commit $PR ${PR_URL}"
          else
            body="Test issue for commit ${GITHUB_SHA}"
          fi
          body="${body}
          - [Workflow run](https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/attempts/${GITHUB_RUN_ATTEMPT})"
          url=$(gh issue create -R "${GITHUB_REPOSITORY}" --title "issue-reopener-basic pre-submit test issue" --body "${body}" --label "test-issue")
          echo "::debug::Closing GitHub issue: ${url}"
          gh issue close "${url}"
          echo "url=${url}" >> "${GITHUB_OUTPUT}"

      - name: Setup mock repo
        env:
          ISSUE_URL: ${{ steps.create-issue.outputs.url }}
        run: |
          git init
          mkdir test
          echo "// TODO(${ISSUE_URL}): still open" > test/test.go

      # NOTE: We cannot use dynamic variables or absolute paths.
      # Here we must provide a path relative to GITHUB_WORKSPACE so we ensure
      # we get back to the root tmp directory no matter what GITHUB_WORKSPACE
      # directory is set to.
      - name: Run todo-issue-reopener
        uses: "./../../../../../../../../../../../tmp/todo-issue-reopener"

      - name: Check issue was reopened
        env:
          GH_TOKEN: ${{ github.token }}
          ISSUE_URL: ${{ steps.create-issue.outputs.url }}
        run: |
          # Ensure the issue was reopened.
          state=$(gh issue view "${ISSUE_URL}" --json state | jq -r '.state')
          [ "${state}" == "OPEN" ]

          # Check that the body contains the right path
          # NOTE: Need to get text output in order to get issue comments.
          body=$(gh issue view "${ISSUE_URL}" -c)
          [[ "${body}" == *"1. [test/test.go:1]"* ]]

  issue-reopener-basic-cleanup:
    runs-on: ubuntu-latest
    needs: issue-reopener-basic
    if: ${{ always() }}
    permissions:
      issues: write
    steps:
      - env:
          ISSUE_URL: ${{ needs.issue-reopener-basic.outputs.issue-url }}
          GH_TOKEN: ${{ github.token }}
        run: |
          # Close the test issue.
          gh issue close "${ISSUE_URL}" || true

  issue-reopener-path:
    runs-on: ubuntu-latest
    outputs:
      issue-url: ${{ steps.create-issue.outputs.url }}
    permissions:
      issues: write
    steps:
      - name: Checkout action
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: "todo-issue-reopener"
          persist-credentials: false

      - id: create-issue
        name: Create closed issue
        env:
          GH_TOKEN: ${{ github.token }}
          PR_URL: ${{ github.event.pull_request.html_url }}
        run: |
          body=""
          if [ "${PR_URL}" != "" ]; then
            body="Test issue for commit $PR ${PR_URL}"
          else
            body="Test issue for commit ${GITHUB_SHA}"
          fi
          body="${body}
          - [Workflow run](https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/attempts/${GITHUB_RUN_ATTEMPT})"
          url=$(gh issue create -R "${GITHUB_REPOSITORY}" --title "issue-reopener-path pre-submit test issue" --body "${body}" --label "test-issue")
          echo "::debug::Closing GitHub issue: ${url}"
          gh issue close "${url}"
          echo "url=${url}" >> "${GITHUB_OUTPUT}"

      - name: Setup mock repo
        env:
          ISSUE_URL: ${{ steps.create-issue.outputs.url }}
        run: |
          git init
          mkdir test
          echo "// TODO(${ISSUE_URL}): still open" > test/test.go

      - uses: ./todo-issue-reopener/
        with:
          path: "test/"

      - env:
          GH_TOKEN: ${{ github.token }}
          ISSUE_URL: ${{ steps.create-issue.outputs.url }}
        run: |
          # Ensure the issue was reopened.
          state=$(gh issue view "${ISSUE_URL}" --json state | jq -r '.state')
          [ "${state}" == "OPEN" ]

          # Check that the body contains the right path
          # NOTE: Need to get text output in order to get issue comments.
          body=$(gh issue view "${ISSUE_URL}" -c)
          [[ "${body}" == *"1. [test/test.go:1]"* ]]

  issue-reopener-path-cleanup:
    runs-on: ubuntu-latest
    needs: issue-reopener-path
    if: ${{ always() }}
    permissions:
      issues: write
    steps:
      - env:
          ISSUE_URL: ${{ needs.issue-reopener-path.outputs.issue-url }}
          GH_TOKEN: ${{ github.token }}
        run: |
          # Close the test issue.
          gh issue close "${ISSUE_URL}" || true

  issue-reopener-dry-run:
    runs-on: ubuntu-latest
    outputs:
      issue-url: ${{ steps.create-issue.outputs.url }}
    permissions:
      issues: write
    steps:
      - name: Checkout action
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: "todo-issue-reopener"
          persist-credentials: false

      # NOTE: We want to call the todo-issue-reopener action from a checkout on
      #       the default path of GITHUB_WORKSPACE but we don't want the code
      #       from the action itself to affect the outcome. We move it to /tmp
      #       so that it outside of the GITHUB_WORKSPACE.
      - name: Move checkout to tmp
        run: |
          mv "${GITHUB_WORKSPACE}/todo-issue-reopener" "/tmp"

      - id: create-issue
        name: Create closed issue
        env:
          GH_TOKEN: ${{ github.token }}
          PR_URL: ${{ github.event.pull_request.html_url }}
        run: |
          body=""
          if [ "${PR_URL}" != "" ]; then
            body="Test issue for commit $PR ${PR_URL}"
          else
            body="Test issue for commit ${GITHUB_SHA}"
          fi
          body="${body}
          - [Workflow run](https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/attempts/${GITHUB_RUN_ATTEMPT})"
          url=$(gh issue create -R "${GITHUB_REPOSITORY}" --title "issue-reopener-dry-run pre-submit test issue" --body "${body}" --label "test-issue")
          echo "::debug::Closing GitHub issue: ${url}"
          gh issue close "${url}"
          echo "url=${url}" >> "${GITHUB_OUTPUT}"

      - name: Setup mock repo
        env:
          ISSUE_URL: ${{ steps.create-issue.outputs.url }}
        run: |
          git init
          mkdir test
          echo "// TODO(${ISSUE_URL}): still open" > test/test.go

      # NOTE: We cannot use dynamic variables or absolute paths.
      # Here we must provide a path relative to GITHUB_WORKSPACE so we ensure
      # we get back to the root tmp directory no matter what GITHUB_WORKSPACE
      # directory is set to.
      - name: Run todo-issue-reopener
        uses: "./../../../../../../../../../../../tmp/todo-issue-reopener"
        with:
          dry-run: true

      - name: Check issue is still closed.
        env:
          GH_TOKEN: ${{ github.token }}
          ISSUE_URL: ${{ steps.create-issue.outputs.url }}
        run: |
          # Ensure the issue was not reopened.
          state=$(gh issue view "${ISSUE_URL}" --json state | jq -r '.state')
          [ "${state}" == "CLOSED" ]

  issue-reopener-dry-run-cleanup:
    runs-on: ubuntu-latest
    needs: issue-reopener-dry-run
    if: ${{ always() }}
    permissions:
      issues: write
    steps:
      - env:
          ISSUE_URL: ${{ needs.issue-reopener-dry-run.outputs.issue-url }}
          GH_TOKEN: ${{ github.token }}
        run: |
          # Ensure the the test issue is closed even if test fails.
          gh issue close "${ISSUE_URL}" || true

  issue-reopener-subdir:
    runs-on: ubuntu-latest
    outputs:
      issue-url: ${{ steps.create-issue.outputs.url }}
    permissions:
      issues: write
    steps:
      - name: Checkout action
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: "todo-issue-reopener"
          persist-credentials: false

      - id: create-issue
        name: Create closed issue
        env:
          GH_TOKEN: ${{ github.token }}
          PR_URL: ${{ github.event.pull_request.html_url }}
        run: |
          body=""
          if [ "${PR_URL}" != "" ]; then
            body="Test issue for commit $PR ${PR_URL}"
          else
            body="Test issue for commit ${GITHUB_SHA}"
          fi
          body="${body}
          - [Workflow run](https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/attempts/${GITHUB_RUN_ATTEMPT})"
          url=$(gh issue create -R "${GITHUB_REPOSITORY}" --title "issue-reopener-subdir pre-submit test issue" --body "${body}" --label "test-issue")
          echo "::debug::Closing GitHub issue: ${url}"
          gh issue close "${url}"
          echo "url=${url}" >> "${GITHUB_OUTPUT}"

      - name: Setup mock repo
        env:
          ISSUE_URL: ${{ steps.create-issue.outputs.url }}
        run: |
          mkdir -p test/subdir
          cd test/
          git init
          echo "// TODO(${ISSUE_URL}): still open" > subdir/test.go

      - name: Run todo-issue-reopener
        uses: "./todo-issue-reopener"
        with:
          path: "test/subdir/"

      - env:
          GH_TOKEN: ${{ github.token }}
          ISSUE_URL: ${{ steps.create-issue.outputs.url }}
        run: |
          # Ensure the issue was reopened.
          state=$(gh issue view "${ISSUE_URL}" --json state | jq -r '.state')
          [ "${state}" == "OPEN" ]

          # Check that the body contains the right path
          # NOTE: Need to get text output in order to get issue comments.
          body=$(gh issue view "${ISSUE_URL}" -c)
          [[ "${body}" == *"1. [subdir/test.go:1]"* ]]

  issue-reopener-subdir-cleanup:
    runs-on: ubuntu-latest
    needs: issue-reopener-subdir
    if: ${{ always() }}
    permissions:
      issues: write
    steps:
      - env:
          ISSUE_URL: ${{ needs.issue-reopener-subdir.outputs.issue-url }}
          GH_TOKEN: ${{ github.token }}
        run: |
          # Close the test issue.
          gh issue close "${ISSUE_URL}" || true

  issue-reopener-vanityURLs:
    runs-on: ubuntu-latest
    outputs:
      issue-url: ${{ steps.create-issue.outputs.url }}
    permissions:
      issues: write
    steps:
      - name: Checkout action
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: "todo-issue-reopener"
          persist-credentials: false

      # NOTE: We want to call the todo-issue-reopener action from a checkout on
      #       the default path of GITHUB_WORKSPACE but we don't want the code
      #       from the action itself to affect the outcome. We move it to /tmp
      #       so that it outside of the GITHUB_WORKSPACE.
      - name: Move checkout to tmp
        run: |
          mv "${GITHUB_WORKSPACE}/todo-issue-reopener" "/tmp"

      - id: create-issue
        name: Create closed issue
        env:
          GH_TOKEN: ${{ github.token }}
          PR_URL: ${{ github.event.pull_request.html_url }}
        run: |
          body=""
          if [ "${PR_URL}" != "" ]; then
            body="Test issue for commit $PR ${PR_URL}"
          else
            body="Test issue for commit ${GITHUB_SHA}"
          fi
          body="${body}
          - [Workflow run](https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/attempts/${GITHUB_RUN_ATTEMPT})"
          url=$(gh issue create -R "${GITHUB_REPOSITORY}" --title "issue-reopener-vanityURLs pre-submit test issue" --body "${body}" --label "test-issue")
          echo "::debug::Closing GitHub issue: ${url}"
          gh issue close "${url}"
          echo "url=${url}" >> "${GITHUB_OUTPUT}"

      - name: Setup mock repo
        env:
          ISSUE_URL: ${{ steps.create-issue.outputs.url }}
        run: |
          git init
          mkdir test
          issue_no="${ISSUE_URL##*/}"
          vanity_url="https://golang.org/issues/${issue_no}"

          echo "::debug::Vanity issue url: ${url}"
          echo "// TODO(${vanity_url}): still open" > test/test.go

          mkdir .github
          echo "vanityURLs:" >> .github/issue-reopener.yml
          echo "- \"^\\\\s*(https?://)?golang.org/issues/(?<id>[0-9]+)\\\\s*$\"" >> .github/issue-reopener.yml

      # NOTE: We cannot use dynamic variables or absolute paths.
      # Here we must provide a path relative to GITHUB_WORKSPACE so we ensure
      # we get back to the root tmp directory no matter what GITHUB_WORKSPACE
      # directory is set to.
      - name: Run todo-issue-reopener
        uses: "./../../../../../../../../../../../tmp/todo-issue-reopener"

      - env:
          GH_TOKEN: ${{ github.token }}
          ISSUE_URL: ${{ steps.create-issue.outputs.url }}
        run: |
          # Ensure the issue was reopened.
          state=$(gh issue view "${ISSUE_URL}" --json state | jq -r '.state')
          [ "${state}" == "OPEN" ]

          # Check that the body contains the right path
          # NOTE: Need to get text output in order to get issue comments.
          body=$(gh issue view "${ISSUE_URL}" -c)
          [[ "${body}" == *"1. [test/test.go:1]"* ]]

  issue-reopener-vanityURLs-cleanup:
    runs-on: ubuntu-latest
    needs: issue-reopener-vanityURLs
    if: ${{ always() }}
    permissions:
      issues: write
    steps:
      - env:
          ISSUE_URL: ${{ needs.issue-reopener-vanityURLs.outputs.issue-url }}
          GH_TOKEN: ${{ github.token }}
        run: |
          # Close the test issue.
          gh issue close "${ISSUE_URL}" || true
